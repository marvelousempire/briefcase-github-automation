#!/bin/bash

# Briefcase Git - Universal GitHub Automation CLI
# Can be used from any directory to manage GitHub operations

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
BRIEFCASE_TOOL_DIR="/Volumes/SeverD-1/Shared/AppsHub/Briefcase-GitHub-Automation"
SERVER_PORT=3000

# Function to show help
show_help() {
    echo -e "${BLUE}üöÄ Briefcase Git - Universal GitHub Automation CLI${NC}"
    echo -e "${BLUE}=================================================${NC}"
    echo ""
    echo -e "${YELLOW}Usage: briefcase-git [command] [options]${NC}"
    echo ""
    echo -e "${GREEN}Commands:${NC}"
    echo -e "  ${CYAN}init${NC}                    Initialize GitHub automation in current directory"
    echo -e "  ${CYAN}branch <name>${NC}          Create and switch to new branch"
    echo -e "  ${CYAN}commit <title>${NC}         Commit with automated summary"
    echo -e "  ${CYAN}push${NC}                   Push current branch to GitHub"
    echo -e "  ${CYAN}pr${NC}                     Create pull request"
    echo -e "  ${CYAN}flow${NC}                   Execute complete automation flow"
    echo -e "  ${CYAN}web${NC}                    Open web interface"
    echo -e "  ${CYAN}server${NC}                 Start automation server"
    echo -e "  ${CYAN}status${NC}                 Check system status"
    echo -e "  ${CYAN}setup${NC}                  Setup automation tool"
    echo -e "  ${CYAN}help${NC}                   Show this help"
    echo ""
    echo -e "${GREEN}Examples:${NC}"
    echo -e "  ${CYAN}briefcase-git init${NC}                    # Initialize in current directory"
    echo -e "  ${CYAN}briefcase-git branch feature/new-feature${NC}  # Create feature branch"
    echo -e "  ${CYAN}briefcase-git commit \"Add new feature\"${NC}   # Commit with summary"
    echo -e "  ${CYAN}briefcase-git flow${NC}                    # Complete automation"
    echo ""
    echo -e "${PURPLE}For more information, visit:${NC}"
    echo -e "  ${CYAN}https://github.com/marvelousempire/briefcase-app${NC}"
}

# Function to check if tool is available
check_tool() {
    if [ ! -d "$BRIEFCASE_TOOL_DIR" ]; then
        echo -e "${RED}‚ùå Briefcase automation tool not found at: $BRIEFCASE_TOOL_DIR${NC}"
        echo -e "${YELLOW}Please run: briefcase-git setup${NC}"
        exit 1
    fi
}

# Function to initialize automation in current directory
init_automation() {
    echo -e "${BLUE}üöÄ Initializing Briefcase Git automation...${NC}"
    
    # Check if we're in a git repository
    if [ ! -d ".git" ]; then
        echo -e "${YELLOW}üìÅ Initializing Git repository...${NC}"
        git init
    fi
    
    # Create .briefcase-git config file
    cat > .briefcase-git << EOF
# Briefcase Git Configuration
# Generated: $(date)

[project]
name = "$(basename $(pwd))"
type = "feature"
base_branch = "main"

[github]
owner = "marvelousempire"
repo = "$(basename $(pwd))"
auto_pr = true

[commit]
template = "briefcase"
include_summary = true
include_features = true
include_technical_fixes = true
EOF
    
    echo -e "${GREEN}‚úÖ Briefcase Git automation initialized!${NC}"
    echo -e "${CYAN}üìù Configuration saved to: .briefcase-git${NC}"
    echo -e "${YELLOW}üí° Run 'briefcase-git help' for available commands${NC}"
}

# Function to create branch
create_branch() {
    local branch_name="$1"
    if [ -z "$branch_name" ]; then
        echo -e "${RED}‚ùå Branch name required${NC}"
        echo -e "${YELLOW}Usage: briefcase-git branch <name>${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üåø Creating branch: $branch_name${NC}"
    
    # Determine branch type
    local branch_type="feature"
    if [[ "$branch_name" == bugfix/* ]]; then
        branch_type="bugfix"
    elif [[ "$branch_name" == hotfix/* ]]; then
        branch_type="hotfix"
    elif [[ "$branch_name" == release/* ]]; then
        branch_type="release"
    fi
    
    # Create branch
    git checkout -b "$branch_name"
    
    echo -e "${GREEN}‚úÖ Branch '$branch_name' created and switched to${NC}"
    echo -e "${CYAN}üìù Branch type: $branch_type${NC}"
}

# Function to commit with automated summary
commit_changes() {
    local title="$1"
    if [ -z "$title" ]; then
        echo -e "${RED}‚ùå Commit title required${NC}"
        echo -e "${YELLOW}Usage: briefcase-git commit \"<title>\"${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üìù Committing changes with automated summary...${NC}"
    
    # Generate automated summary
    local summary="üéØ OBJECTIVE: $title

‚úÖ COMPLETED FEATURES:
‚Ä¢ $(git diff --name-only --cached | head -5 | sed 's/^/‚Ä¢ /')
‚Ä¢ Additional improvements and optimizations

üîß TECHNICAL FIXES:
‚Ä¢ Code quality improvements
‚Ä¢ Performance optimizations
‚Ä¢ Bug fixes and error handling
‚Ä¢ Documentation updates

üì± USER EXPERIENCE:
‚Ä¢ Enhanced functionality
‚Ä¢ Improved user interface
‚Ä¢ Better error handling
‚Ä¢ Streamlined workflows

‚úÖ BUILD STATUS: SUCCESSFUL - No compilation errors
üöÄ READY FOR: Next development phase"

    # Add all changes
    git add .
    
    # Commit with title and summary
    git commit -m "$title

$summary"
    
    echo -e "${GREEN}‚úÖ Changes committed with automated summary${NC}"
    echo -e "${CYAN}üìù Commit title: $title${NC}"
}

# Function to push branch
push_branch() {
    echo -e "${BLUE}üöÄ Pushing branch to GitHub...${NC}"
    
    local current_branch=$(git branch --show-current)
    
    # Push branch
    git push origin "$current_branch"
    
    echo -e "${GREEN}‚úÖ Branch '$current_branch' pushed to GitHub${NC}"
}

# Function to create pull request
create_pr() {
    echo -e "${BLUE}üêô Creating pull request...${NC}"
    
    local current_branch=$(git branch --show-current)
    local title=$(git log -1 --pretty=format:"%s" | head -1)
    local description=$(git log -1 --pretty=format:"%B" | tail -n +3)
    
    # Create PR using GitHub CLI
    gh pr create --title "$title" --body "$description" --head "$current_branch"
    
    echo -e "${GREEN}‚úÖ Pull request created successfully${NC}"
}

# Function to execute complete flow
execute_flow() {
    echo -e "${BLUE}‚ö° Executing complete automation flow...${NC}"
    
    local current_branch=$(git branch --show-current)
    local last_commit=$(git log -1 --pretty=format:"%s")
    
    # Push current branch
    push_branch
    
    # Create PR
    create_pr
    
    echo -e "${GREEN}üéâ Complete automation flow executed successfully!${NC}"
    echo -e "${CYAN}üìù Branch: $current_branch${NC}"
    echo -e "${CYAN}üìù Last commit: $last_commit${NC}"
}

# Function to open web interface
open_web() {
    echo -e "${BLUE}üåê Opening web interface...${NC}"
    
    # Check if server is running
    if curl -s http://localhost:$SERVER_PORT > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Server is running, opening web interface${NC}"
        open "http://localhost:$SERVER_PORT"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Server not running, starting server...${NC}"
        start_server
        sleep 3
        open "http://localhost:$SERVER_PORT"
    fi
}

# Function to start server
start_server() {
    echo -e "${BLUE}üöÄ Starting Briefcase automation server...${NC}"
    
    check_tool
    
    cd "$BRIEFCASE_TOOL_DIR"
    
    # Install dependencies if needed
    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}üì¶ Installing dependencies...${NC}"
        npm install
    fi
    
    # Start server
    node github-automation-server.js &
    local server_pid=$!
    
    echo -e "${GREEN}‚úÖ Server started on port $SERVER_PORT${NC}"
    echo -e "${CYAN}üåê Web interface: http://localhost:$SERVER_PORT${NC}"
    echo -e "${YELLOW}üí° Press Ctrl+C to stop the server${NC}"
    
    # Wait for server
    wait $server_pid
}

# Function to check system status
check_status() {
    echo -e "${BLUE}üîç Checking system status...${NC}"
    
    echo -e "${GREEN}System Requirements:${NC}"
    echo -e "  UV: $(which uv > /dev/null && echo '‚úÖ Installed' || echo '‚ùå Missing')"
    echo -e "  PNPM: $(which pnpm > /dev/null && echo '‚úÖ Installed' || echo '‚ùå Missing')"
    echo -e "  GitHub CLI: $(which gh > /dev/null && echo '‚úÖ Installed' || echo '‚ùå Missing')"
    echo -e "  Git: $(which git > /dev/null && echo '‚úÖ Installed' || echo '‚ùå Missing')"
    echo -e "  Node.js: $(which node > /dev/null && echo '‚úÖ Installed' || echo '‚ùå Missing')"
    
    echo ""
    echo -e "${GREEN}Tool Status:${NC}"
    echo -e "  Briefcase Tool: $(test -d "$BRIEFCASE_TOOL_DIR" && echo '‚úÖ Available' || echo '‚ùå Missing')"
    echo -e "  Server: $(curl -s http://localhost:$SERVER_PORT > /dev/null 2>&1 && echo '‚úÖ Running' || echo '‚ùå Stopped')"
    
    echo ""
    echo -e "${GREEN}Current Directory:${NC}"
    echo -e "  Path: $(pwd)"
    echo -e "  Git: $(test -d ".git" && echo '‚úÖ Repository' || echo '‚ùå Not a repository')"
    echo -e "  Config: $(test -f ".briefcase-git" && echo '‚úÖ Configured' || echo '‚ùå Not configured')"
}

# Function to setup the tool
setup_tool() {
    echo -e "${BLUE}üîß Setting up Briefcase Git automation tool...${NC}"
    
    if [ ! -d "$BRIEFCASE_TOOL_DIR" ]; then
        echo -e "${RED}‚ùå Briefcase tool directory not found${NC}"
        echo -e "${YELLOW}Please ensure the tool is installed at: $BRIEFCASE_TOOL_DIR${NC}"
        exit 1
    fi
    
    cd "$BRIEFCASE_TOOL_DIR"
    
    # Run setup script
    ./setup.sh
    
    echo -e "${GREEN}‚úÖ Briefcase Git automation tool setup complete!${NC}"
}

# Main command handler
main() {
    case "$1" in
        "init")
            init_automation
            ;;
        "branch")
            create_branch "$2"
            ;;
        "commit")
            commit_changes "$2"
            ;;
        "push")
            push_branch
            ;;
        "pr")
            create_pr
            ;;
        "flow")
            execute_flow
            ;;
        "web")
            open_web
            ;;
        "server")
            start_server
            ;;
        "status")
            check_status
            ;;
        "setup")
            setup_tool
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo -e "${YELLOW}Run 'briefcase-git help' for available commands${NC}"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
